public class MyQueue {

 public Stack<Integer> stack1 ;
	 public Stack<Integer> stack2 ;
	 public int size;
	
    /** Initialize your data structure here. */
    public MyQueue() {
    	stack1 = new Stack<Integer>();
    	stack2 = new Stack<Integer>();
    	size = 0;
    }
    
    /** Push element x to the back of queue. */
    public void push(int x) {
        stack1.push(x);
        size++;
    }
    
    /** Removes the element from in front of queue and returns that element. */
    public int pop() {
        if(!stack2.isEmpty()){
            size--;
        	return stack2.pop();
        }
        else{
        	while(!stack1.isEmpty()){
        		stack2.push(stack1.pop());
        	}
            size--;
        	return stack2.pop();
        }


    }
    
    /** Get the front element. */
    public int peek() {
        if(!stack2.isEmpty()){
        	return stack2.peek();
        }
        else{
        	while(!stack1.isEmpty()){
        		stack2.push(stack1.pop());
        	}
        	return stack2.peek();
        }
    }
    
    /** Returns whether the queue is empty. */
    public boolean empty() {
        return size==0 ? true: false;
    }
}

/**
 * Your MyQueue object will be instantiated and called as such:
 * MyQueue obj = new MyQueue();
 * obj.push(x);
 * int param_2 = obj.pop();
 * int param_3 = obj.peek();
 * boolean param_4 = obj.empty();
 */