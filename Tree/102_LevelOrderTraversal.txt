/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
public class Solution {
    public List<List<Integer>> levelOrder(TreeNode root) {

        List<List<Integer>> result = new ArrayList<>();
        if(root == null){
            return result;
        }
        
        ArrayList<Integer> level = new ArrayList<Integer>();
        LinkedList<TreeNode> queue = new LinkedList<>();
         
        TreeNode last = root;
        TreeNode nlast = null;
        //TreeNode temp = root;
         
        queue.add(root);
        while(queue.size()!=0){
			TreeNode cur = queue.poll();
            level.add(cur.val);
            
            if(cur.left != null){
                queue.offer(cur.left);
                nlast = cur.left;
            }
            if(cur.right != null){
                queue.offer(cur.right);
                nlast = cur.right;
            }
            if(cur == last){
                last = nlast;
                result.add(level);
                level = new ArrayList<Integer>();
            }
        }
        return result;
        /*
        int[][] result_last = new int[result.size()][];
        for(int i =0; i< result.size(); i++){
        	result_last[i]=new int[result.get(i).size()];
            for(int j=0; j < result.get(i).size(); j++){
                result_last[i][j] = result.get(i).get(j);
            }
            
        }
        */
        
        
        //return result_last;
    }
}