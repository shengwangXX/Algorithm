public class Solution {
    
    public int[] searchRange(int[] nums, int target) {
        int[] result = new int[2];
        result[0] = -1;
        result[1] = -1;
        if(nums == null || nums.length ==0){
        	return result;
        }
        int mid = Arrays.binarySearch(nums, target);
        if(mid < 0){
        	return result;
        }
        int start = mid;
        while(start>=0&&nums[start] == target){
        	start--;
        }
        start++;
        int end = mid;
        while(end <=nums.length-1 && nums[end] == target){
        	end++;
        }
        end--;
        
        result[0] = start;
        result[1] = end;
        
        return result;
    }
    
}

Time : O(n)
Space: O(1)

public class Solution {
    
    public int searchStart(int[] nums, int target){
        if(nums==null || nums.length==0){
    		return 0;
        }
        int start = 0; 
        int end = nums.length -1;
        int mid;
        while(start<=end){
        	mid = (start + end)>>1;
        	if(nums[mid] > target){
        		end = mid -1;
        	}
        	else if(nums[mid] < target){
        		start = mid + 1;
        	}
        	else{
        		if(mid> 0 && nums[mid-1]==target){
        			end = mid-1;
        		}
        		else{
            		return mid;
        		}
        		/*
        		if(mid == 0 || nums[mid-1] < target){
        			return mid;
        		}
        		else{
        			end = mid -1;
        		}
        		*/
        	}       	
        }
        return -1;
    }
    
    public int searchEnd(int[] nums, int target){
        if(nums==null || nums.length==0){
    		return 0;
        }
        int start = 0; 
        int end = nums.length -1;
        int mid;
        while(start<=end){
        	mid = (start + end)>>1;
        	if(nums[mid] > target){
        		end = mid -1;
        	}
        	else if(nums[mid] < target){
        		start = mid + 1;
        	}
        	else{

        		if(mid<nums.length -1 && nums[mid+1]==target){
        			start = mid +1;
        		}
        		else{
            		return mid;
        		}
        	}       	
        }
        return -1;
    }
    
    public int[] searchRange(int[] nums, int target) {
        int[] result = new int[2];
        result[0] = -1;
        result[1] = -1;
        if(nums == null || nums.length ==0){
        	return result;
        }

        result[0] = searchStart(nums, target);
        if(result[0] == -1){
        	return result;
        }
        
        result[1] = searchEnd(nums, target);
        
        return result;
        
    }
    
}

Time : O(n)
Space : O(1)

