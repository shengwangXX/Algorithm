public class Solution {
    public int searchRow(int[][] matrix,int m, int n,  int target) {
        int start = 0; 
        int end = m-1;
        int mid;
        while(start<=end){
        	mid = (start + end)>>1;
        	if(matrix[mid][n-1] > target){
        		end = mid -1;
        	}
        	else if(matrix[mid][n-1] < target){
        		start = mid + 1;
        	}
        	else{
        		return mid; 
        	}       	
        }
        return start;
    }
    
    public boolean searchColumn(int[] nums, int target) {
        if(nums==null || nums.length==0){
    		return false;
        }
        int start = 0; 
        int end = nums.length -1;
        int mid;
        while(start<=end){
        	mid = (start + end)>>1;
        	if(nums[mid] > target){
        		end = mid -1;
        	}
        	else if(nums[mid] < target){
        		start = mid + 1;
        	}
        	else{
        		return true; 
        	}       	
        }
        return false;
    }
    
    public boolean searchMatrix(int[][] matrix, int target) {
        if(matrix == null || matrix.length == 0 || matrix[0].length == 0){
        	return false;
        }
        int m = matrix.length;
        int n = matrix[0].length;
        
        int row = searchRow(matrix, m, n, target);
        if( row>=m){
        	return false;
        }
 
        return searchColumn(matrix[row], target);
    }
}

Time : O(lgm + lgn)
Space : O(1)
