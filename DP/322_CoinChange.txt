    public int coinChange(int[] coins, int amount) {
        if(coins == null || coins.length == 0 || amount <0){
        	return 0;
        }
        int[][] dp = new int[coins.length][amount+1];
        int max = Integer.MAX_VALUE;
        dp[0][0] =0;
        for(int i =1; i< amount+1; i++){
        	dp[0][i] = max;
        	if( i >= coins[0] && dp[0][i - coins[0]] != max ){
        		dp[0][i] = dp[0][ i-coins[0]] +1;
        	}
        }
        for(int i =1; i < coins.length; i++){
        	dp[i][0] = 0;
        }
        for(int i = 1; i < coins.length; i++){
        	for(int j = 1 ; j<=amount; j++){
        		dp[i][j] = max;
        		if(dp[i-1][j] != max){
        			dp[i][j] = dp[i-1][j];
        		}
        		if(j >=coins[i] && dp[i][j - coins[i]] != max){
        			dp[i][j] = Math.min(dp[i][j], dp[i][j-coins[i]] +1);
        		}
        	}
        }
        
        return dp[coins.length-1][amount]!= max ? dp[coins.length-1][amount] : -1;
        
    }

Time : 	O(mn)
Space : O(mn)